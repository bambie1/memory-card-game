{"version":3,"sources":["components/Card/Card.jsx","components/CircleTracker/CircleTracker.jsx","components/Timer-And-Progress/colorCodes.js","components/Timer-And-Progress/GameProgress.jsx","components/Timer-And-Progress/Timer.jsx","components/Board/Board.jsx","components/GameSettings/GameSettings.jsx","components/GameResults/GameResults.jsx","card-list.js","duplicateAndShuffle.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","disabled","src","name","handleClick","flipped","solved","width","className","onClick","process","alt","CircleTracker","fraction","strokeColor","displayText","viewBox","xmlns","cx","cy","r","strokeDasharray","style","stroke","d","colorCodes","color","GameProgress","solvedFraction","remainingPathColor","toFixed","formatTimeLeft","time","minutes","Math","floor","seconds","Timer","timeLeft","timeLimit","clockFraction","Board","timePassed","images","solveBoard","timeUp","togglePause","quitGame","startClock","useState","flippedCards","setFlippedCards","setSolved","paused","setPaused","started","setStarted","setDisabled","length","resetCards","sameCardClicked","includes","cardsMatch","clickedCard","find","image","openCard","map","otherProps","key","setTimeout","window","confirm","GameSettings","handleGameStart","e","target","GameResults","percentageComplete","href","rel","Images","shuffle","a","j","x","i","random","duplicate","cardsArray","duplicateArray","reduce","acc","obj","push","App","timer","size","setSize","setTimeLimit","setImages","setTimePassed","hasGameStarted","setHasGameStarted","isGameTime","setIsGameTime","isGameOver","setIsGameOver","useEffect","slice","startTimer","endGame","restartGame","clearTimeout","CSSTransition","in","timeout","classNames","exit","unmountOnExit","console","log","solvedPerc","num","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.82dbf26a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.scss\";\r\n\r\nconst Card = ({\r\n  id,\r\n  disabled,\r\n  src,\r\n  name,\r\n  handleClick,\r\n  flipped,\r\n  solved,\r\n  width,\r\n}) => {\r\n  return (\r\n    <div\r\n      className={`card-component ${flipped || solved ? \"flipped\" : \"\"} ${\r\n        solved ? \"solved\" : \"\"\r\n      } ${width}`}\r\n      onClick={() => {\r\n        !disabled && handleClick(id);\r\n      }}\r\n    >\r\n      <img\r\n        className={\"card-front\"}\r\n        src={process.env.PUBLIC_URL + src}\r\n        alt={name}\r\n      />\r\n      <img\r\n        className={\"card-back\"}\r\n        src={process.env.PUBLIC_URL + \"/assets/card-front.jpg\"}\r\n        alt=\"logo\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./CircleTracker.scss\";\r\n\r\nconst CircleTracker = ({ fraction, strokeColor, displayText }) => {\r\n  return (\r\n    <div className=\"tracker\">\r\n      <svg\r\n        className=\"tracker-svg\"\r\n        viewBox=\"0 0 100 100\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <g className=\"tracker-circle\">\r\n          <circle className=\"tracker-path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\" />\r\n          <path\r\n            strokeDasharray={`${fraction * 283} 283`}\r\n            id=\"tracker-path-remaining\"\r\n            className={`tracker-path-remaining`}\r\n            style={{ stroke: strokeColor }}\r\n            d=\"M 50, 50 m -45, 0 a 45,45 0 1,0 90,0 a 45,45 0 1,0 -90,0 \"\r\n          ></path>\r\n        </g>\r\n      </svg>\r\n      <span className=\"tracker-label\">{displayText}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CircleTracker;\r\n","const colorCodes = (fraction) => {\r\n  var color = \"green\";\r\n  if (fraction <= 0.5) {\r\n    color = \"orange\";\r\n    if (fraction <= 0.25) color = \"red\";\r\n  }\r\n  return color;\r\n};\r\n\r\n// const remainingPathColor = COLOR_CODES.info.color;\r\n\r\nexport default colorCodes;\r\n","import React from \"react\";\r\nimport CircleTracker from \"../CircleTracker/CircleTracker\";\r\nimport \"./Timer-Progress.scss\";\r\nimport colorCodes from \"./colorCodes\";\r\n\r\nconst GameProgress = ({ solvedFraction }) => {\r\n  var remainingPathColor = colorCodes(solvedFraction);\r\n  return (\r\n    <div className=\"game-progress\">\r\n      <CircleTracker\r\n        fraction={solvedFraction}\r\n        displayText={`${(solvedFraction * 100).toFixed(1)}%`}\r\n        strokeColor={remainingPathColor}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameProgress;\r\n","import React from \"react\";\r\nimport \"./Timer-Progress.scss\";\r\nimport colorCodes from \"./colorCodes\";\r\nimport CircleTracker from \"../CircleTracker/CircleTracker\";\r\n\r\nfunction formatTimeLeft(time) {\r\n  var minutes = Math.floor(time / 60);\r\n  let seconds = time % 60;\r\n  if (seconds < 10) {\r\n    seconds = `0${seconds}`;\r\n  }\r\n  return `${minutes}:${seconds}`;\r\n}\r\n\r\nconst Timer = ({ timeLeft, timeLimit }) => {\r\n  var fraction = timeLeft / timeLimit;\r\n  var clockFraction = fraction - (1 / timeLimit) * (1 - fraction);\r\n  var remainingPathColor = colorCodes(clockFraction);\r\n  return (\r\n    <div className=\"timer\">\r\n      <CircleTracker\r\n        fraction={clockFraction}\r\n        displayText={formatTimeLeft(timeLeft)}\r\n        strokeColor={remainingPathColor}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React, { useState } from \"react\";\r\nimport Card from \"../Card/Card\";\r\nimport \"./Board.scss\";\r\nimport GameProgress from \"../Timer-And-Progress/GameProgress\";\r\nimport Timer from \"../Timer-And-Progress/Timer\";\r\n\r\nconst Board = ({\r\n  timeLimit,\r\n  timePassed,\r\n  images,\r\n  solveBoard,\r\n  timeUp,\r\n  togglePause,\r\n  quitGame,\r\n  startClock,\r\n}) => {\r\n  const [flippedCards, setFlippedCards] = useState([]);\r\n  const [solved, setSolved] = useState([]);\r\n  const [paused, setPaused] = useState(false);\r\n  const [started, setStarted] = useState(false);\r\n  const [disabled, setDisabled] = useState(timePassed === timeLimit);\r\n\r\n  const solvedFraction = solved.length / images.length;\r\n  if (timeLimit === timePassed) timeUp(solvedFraction * 100);\r\n\r\n  const handleClick = (id) => {\r\n    setStarted(true);\r\n    startClock();\r\n    if (!(timePassed === timeLimit)) {\r\n      setDisabled(true);\r\n      if (flippedCards.length === 0) {\r\n        setFlippedCards([...flippedCards, id]);\r\n        setDisabled(false);\r\n      } else {\r\n        if (sameCardClicked(id)) {\r\n          setDisabled(false);\r\n          return;\r\n        }\r\n        setFlippedCards([flippedCards[0], id]);\r\n        if (cardsMatch(id)) {\r\n          setSolved([...solved, flippedCards[0], id]); //spreading the flipped array didn't work before\r\n          resetCards();\r\n          if (solved.length + 2 === images.length) {\r\n            solveBoard();\r\n          }\r\n        } else setTimeout(resetCards, 700);\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetCards = () => {\r\n    setFlippedCards([]);\r\n    setDisabled(false);\r\n  };\r\n\r\n  const sameCardClicked = (id) => flippedCards.includes(id);\r\n\r\n  const cancelGame = () => {\r\n    setPaused(true);\r\n    if (window.confirm(\"Are you sure you want to quit?\")) quitGame();\r\n    else if (!paused) setPaused(false);\r\n  };\r\n\r\n  const cardsMatch = (id) => {\r\n    var clickedCard = images.find((image) => image.id === id);\r\n    var openCard = images.find((image) => image.id === flippedCards[0]);\r\n    return clickedCard.name === openCard.name;\r\n  };\r\n  return (\r\n    <div\r\n      className={`game-board ${\r\n        timePassed === timeLimit || solvedFraction === 1 ? \"finished\" : \"\"\r\n      } `}\r\n    >\r\n      <div className=\"game-time\">\r\n        <Timer timeLeft={timeLimit - timePassed} timeLimit={timeLimit} />\r\n        <p className={`game-info ${started ? \"hide\" : \"show\"}`}>\r\n          Your timer starts after your first flip!\r\n        </p>\r\n        <button\r\n          className={`pause-resume ${timePassed > 0 ? \"show\" : \"hide\"}`}\r\n          onClick={() => {\r\n            paused ? togglePause(1) : togglePause(0);\r\n            setDisabled(!disabled);\r\n            setPaused(!paused);\r\n          }}\r\n        >\r\n          {paused ? \"Resume\" : \"Pause Game\"}\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        className={`board ${timePassed === timeLimit ? \"ended\" : \"\"} ${\r\n          paused || disabled ? \"disabled\" : \"\"\r\n        }`}\r\n      >\r\n        {images.map(({ id, ...otherProps }) => (\r\n          <Card\r\n            key={id}\r\n            {...otherProps}\r\n            flipped={flippedCards.includes(id)}\r\n            handleClick={() => handleClick(id)}\r\n            disabled={disabled || solved.includes(id)}\r\n            solved={solved.includes(id)}\r\n            width={\r\n              images.length <= 16\r\n                ? \"small\"\r\n                : images.length > 20\r\n                ? \"big\"\r\n                : \"medium\"\r\n            }\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"progress-quit\">\r\n        <GameProgress solvedFraction={solvedFraction} />\r\n        <button className=\"quit-game\" onClick={cancelGame}>\r\n          Quit game\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport \"./GameSettings.scss\";\r\n\r\nconst GameSettings = ({ handleGameStart }) => {\r\n  const handleClick = (e) => {\r\n    const { name } = e.target;\r\n    handleGameStart(name);\r\n  };\r\n  return (\r\n    <div className=\"game-settings\">\r\n      <h2>\r\n        MEMORY <span id=\"flip-animation\">FLIP</span>\r\n      </h2>\r\n      <div>\r\n        <button name=\"easy\" onClick={handleClick}>\r\n          EASY\r\n        </button>\r\n        <button name=\"medium\" onClick={handleClick}>\r\n          MEDIUM\r\n        </button>\r\n        <button name=\"hard\" onClick={handleClick}>\r\n          HARD\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameSettings;\r\n","import React from \"react\";\r\nimport \"./GameResults.scss\";\r\n\r\nconst GameResults = ({ percentageComplete, handleClick }) => {\r\n  return (\r\n    <div className=\"game-results\">\r\n      {percentageComplete === 100 ? (\r\n        <h2>You conquered!</h2>\r\n      ) : (\r\n        <div>\r\n          <h3>TIME'S UP!!</h3>\r\n          <h4>\r\n            <span>{percentageComplete.toFixed(2)}</span>%{\" \"}\r\n          </h4>\r\n          <p>You'll do better next time</p>\r\n        </div>\r\n      )}\r\n      <button className=\"play-again\" onClick={() => handleClick()}>\r\n        Play again\r\n      </button>\r\n\r\n      <p id=\"source-link\">\r\n        Want to know what these logos are?{\" \"}\r\n        <a\r\n          href=\"http://reachrecords.com/\"\r\n          rel=\"noopener noreferrer\"\r\n          target=\"_blank\"\r\n        >\r\n          Check it out\r\n        </a>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameResults;\r\n","const Images = [\r\n  {\r\n    id: 1,\r\n    src: \"/assets/andy-heroes.jpg\",\r\n    name: \"Andy-Heroes\",\r\n  },\r\n  {\r\n    id: 2,\r\n    src: \"/assets/anomaly.jpeg\",\r\n    name: \"Anomaly\",\r\n  },\r\n  {\r\n    id: 3,\r\n    src: \"/assets/arrow.jpg\",\r\n    name: \"Arrow\",\r\n  },\r\n  {\r\n    id: 4,\r\n    src: \"/assets/atwt.jpeg\",\r\n    name: \"ATWT\",\r\n  },\r\n  {\r\n    id: 5,\r\n    src: \"/assets/cc2.png\",\r\n    name: \"Church-Clothes-2\",\r\n  },\r\n  {\r\n    id: 6,\r\n    src: \"/assets/gawvi-ffm.jpg\",\r\n    name: \"Fight-For-Me\",\r\n  },\r\n  {\r\n    id: 7,\r\n    src: \"/assets/gawvi-wb.jpg\",\r\n    name: \"We-Belong\",\r\n  },\r\n  {\r\n    id: 8,\r\n    src: \"/assets/kb-twl.jpg\",\r\n    name: \"Today-We-Rebel\",\r\n  },\r\n  {\r\n    id: 9,\r\n    src: \"/assets/kb-twr.png\",\r\n    name: \"Tomorrow-We-Live\",\r\n  },\r\n  {\r\n    id: 10,\r\n    src: \"/assets/rehab.jpg\",\r\n    name: \"Rehab\",\r\n  },\r\n  {\r\n    id: 11,\r\n    src: \"/assets/sonshine.jpg\",\r\n    name: \"Sonshine\",\r\n  },\r\n  {\r\n    id: 12,\r\n    src: \"/assets/tdot-bp.jpg\",\r\n    name: \"Below-Paradise\",\r\n  },\r\n  {\r\n    id: 13,\r\n    src: \"/assets/tdot-kp.jpg\",\r\n    name: \"Kingdom-P\",\r\n  },\r\n  {\r\n    id: 14,\r\n    src: \"/assets/trip-gl.jpg\",\r\n    name: \"The-Good-Life\",\r\n  },\r\n  {\r\n    id: 15,\r\n    src: \"/assets/trip-rise.jpg\",\r\n    name: \"Rise\",\r\n  },\r\n  {\r\n    id: 16,\r\n    src: \"/assets/uncomfortable.jpg\",\r\n    name: \"Uncomfortable\",\r\n  },\r\n];\r\n\r\nexport default Images;\r\n","export const shuffle = (a) => {\r\n  var j, x, i;\r\n  for (i = a.length - 1; i > 0; i--) {\r\n    j = Math.floor(Math.random() * (i + 1));\r\n    x = a[i];\r\n    a[i] = a[j];\r\n    a[j] = x;\r\n  }\r\n  return a;\r\n};\r\n\r\nfunction duplicate(cardsArray) {\r\n  var duplicateArray = cardsArray.reduce(function (acc, obj) {\r\n    acc.push(obj);\r\n    acc.push({\r\n      name: obj.name,\r\n      id: obj.id + 0.5,\r\n      src: obj.src,\r\n    });\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  return shuffle(duplicateArray);\r\n  // return duplicateArray;\r\n}\r\n\r\nexport default duplicate;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Board from \"./components/Board/Board\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport GameSettings from \"./components/GameSettings/GameSettings\";\r\nimport GameResults from \"./components/GameResults/GameResults\";\r\nimport \"./App.css\";\r\nimport Images from \"./card-list\";\r\nimport duplicate, { shuffle } from \"./duplicateAndShuffle\";\r\n\r\nconst App = () => {\r\n  var timer = 0;\r\n  const [solved, setSolved] = useState(0);\r\n  const [size, setSize] = useState(0);\r\n  const [timeLimit, setTimeLimit] = useState(0);\r\n  const [images, setImages] = useState([]);\r\n  const [timePassed, setTimePassed] = useState(0);\r\n  const [hasGameStarted, setHasGameStarted] = useState(false);\r\n  const [isGameTime, setIsGameTime] = useState(false);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setImages(duplicate(shuffle(Images).slice(0, size)));\r\n  }, [size]);\r\n\r\n  useEffect(() => {\r\n    isGameTime && hasGameStarted && startTimer();\r\n  }, [timePassed, timeLimit, hasGameStarted]);\r\n\r\n  const startTimer = () => {\r\n    if (hasGameStarted) {\r\n      timer = setTimeout(() => {\r\n        timePassed < timeLimit && setTimePassed(timePassed + 1);\r\n      }, 1000);\r\n    }\r\n  };\r\n  const solveBoard = () => {\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n      setSolved(100);\r\n      timer = 0;\r\n    }\r\n    endGame();\r\n  };\r\n  const timeUp = (solvedPerc) => {\r\n    setSolved(solvedPerc);\r\n    endGame();\r\n  };\r\n  function endGame() {\r\n    setIsGameOver(true);\r\n    setIsGameTime(false);\r\n  }\r\n  function restartGame() {\r\n    clearTimeout(timer);\r\n    timer = 0;\r\n    setTimePassed(0);\r\n    setIsGameOver(false);\r\n    setIsGameTime(false);\r\n  }\r\n  const handleBackToGame = () => {\r\n    restartGame();\r\n  };\r\n  const togglePauseGame = (num) => {\r\n    if (num === 0) {\r\n      clearTimeout(timer);\r\n      timer = 0;\r\n    } else startTimer();\r\n  };\r\n\r\n  const gameStart = (name) => {\r\n    console.log(\"game start\");\r\n    switch (name) {\r\n      case \"easy\":\r\n        setTimeLimit(60);\r\n        setSize(8);\r\n        break;\r\n      case \"medium\":\r\n        setTimeLimit(60);\r\n        setSize(10);\r\n        break;\r\n      case \"hard\":\r\n        setTimeLimit(45);\r\n        setSize(12);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    setHasGameStarted(false);\r\n    setIsGameTime(true);\r\n    setTimePassed(0);\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <CSSTransition\r\n        in={!isGameTime && !isGameOver}\r\n        timeout={300}\r\n        classNames=\"my-node\"\r\n        exit={false}\r\n        unmountOnExit\r\n      >\r\n        <GameSettings handleGameStart={gameStart} />\r\n      </CSSTransition>\r\n\r\n      <CSSTransition\r\n        in={isGameTime}\r\n        timeout={300}\r\n        classNames=\"my-node\"\r\n        exit={false}\r\n        unmountOnExit\r\n      >\r\n        <Board\r\n          images={images}\r\n          solveBoard={solveBoard}\r\n          timePassed={timePassed}\r\n          timeLimit={timeLimit}\r\n          timeUp={timeUp}\r\n          togglePause={togglePauseGame}\r\n          quitGame={restartGame}\r\n          startClock={() => setHasGameStarted(true)}\r\n        />\r\n      </CSSTransition>\r\n      <CSSTransition\r\n        in={!isGameTime && isGameOver}\r\n        timeout={300}\r\n        classNames=\"my-node\"\r\n        unmountOnExit\r\n        exit={false}\r\n      >\r\n        <GameResults\r\n          percentageComplete={solved}\r\n          handleClick={handleBackToGame}\r\n        />\r\n      </CSSTransition>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}