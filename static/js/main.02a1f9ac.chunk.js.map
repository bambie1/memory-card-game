{"version":3,"sources":["components/Card/Card.jsx","components/Board/Board.jsx","components/Timer/colorCodes.js","components/Timer/Timer.jsx","card-list.js","duplicateAndShuffle.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","disabled","src","name","handleClick","flipped","solved","className","onClick","alt","Board","gameOver","images","useState","flippedCards","setFlippedCards","setSolved","setDisabled","console","log","resetCards","sameCardClicked","includes","cardsMatch","clickedCard","find","image","openCard","map","otherProps","key","length","setTimeout","colorCodes","fraction","color","Timer","timeLeft","timeLimit","clockFraction","remainingPathColor","viewBox","xmlns","cx","cy","r","strokeDasharray","toFixed","style","stroke","d","time","minutes","Math","floor","seconds","formatTimeLeft","Images","duplicateAndShuffle","cardsArray","a","j","x","i","random","shuffle","reduce","acc","obj","push","App","setImages","timePassed","setTimePassed","useEffect","slice","startTimer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6TAoBeA,G,MAjBF,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,GAAIC,EAAwD,EAAxDA,SAAUC,EAA8C,EAA9CA,IAAKC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAC7D,OACE,yBACEC,UAAS,yBAAoBF,GAAWC,EAAS,UAAY,GAApD,YACPA,EAAS,SAAW,IAEtBE,QAAS,YACNP,GAAYG,EAAYJ,KAI3B,yBAAKO,UAAW,aAAcL,IAAKA,EAAKO,IAAKN,IAC7C,yBAAKI,UAAW,YAAaL,IAAI,yBAAyBO,IAAI,YCwDrDC,G,MAnED,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAAa,EACEC,mBAAS,IADX,mBAC/BC,EAD+B,KACjBC,EADiB,OAEVF,mBAAS,IAFC,mBAE/BP,EAF+B,KAEvBU,EAFuB,OAGNH,mBAASF,GAHH,mBAG/BV,EAH+B,KAGrBgB,EAHqB,KAKtCC,QAAQC,IAAI,aAAclB,EAAUU,GACpC,IAuBMS,EAAa,WACjBF,QAAQC,IAAI,qBAAsBL,GAClCI,QAAQC,IAAI,WAAYb,GACxBS,EAAgB,IAChBE,GAAY,IAGRI,EAAkB,SAACrB,GAAD,OAAQc,EAAaQ,SAAStB,IAEhDuB,EAAa,SAACvB,GAClB,IAAIwB,EAAcZ,EAAOa,MAAK,SAACC,GAAD,OAAWA,EAAM1B,KAAOA,KAClD2B,EAAWf,EAAOa,MAAK,SAACC,GAAD,OAAWA,EAAM1B,KAAOc,EAAa,MAEhE,OADAI,QAAQC,IAAI,qBAAsBK,EAAaG,GACxCH,EAAYrB,OAASwB,EAASxB,MAEvC,OACE,kBAAC,WAAD,KACE,yBAAKI,UAAS,gBAAWI,EAAW,QAAU,KAC3CC,EAAOgB,KAAI,gBAAG5B,EAAH,EAAGA,GAAO6B,EAAV,6BACV,kBAAC,EAAD,eACEC,IAAK9B,GACD6B,EAFN,CAGExB,QAASS,EAAaQ,SAAStB,GAC/BI,YAAa,kBA9CH,SAACJ,GACnB,IAAKW,EAGH,GAFAM,GAAY,GACZC,QAAQC,IAAI,qBAAsBL,GACN,IAAxBA,EAAaiB,OACfhB,EAAgB,GAAD,mBAAKD,GAAL,CAAmBd,KAClCkB,QAAQC,IAAI,kBAAmBL,GAC/BG,GAAY,OACP,CACL,GAAII,EAAgBrB,GAAK,OACzBkB,QAAQC,IAAI,mBAAoBL,EAAcd,GAC9Ce,EAAgB,CAACD,EAAa,GAAId,IAC9BuB,EAAWvB,IACbkB,QAAQC,IAAI,YAAaL,GACzBE,EAAU,GAAD,mBAAKV,GAAL,CAAaQ,EAAa,GAAId,KAEvCoB,KACKY,WAAWZ,EAAY,MA6BPhB,CAAYJ,IAC/BC,SAAUA,GAAYK,EAAOgB,SAAStB,GACtCM,OAAQA,EAAOgB,SAAStB,UAI7BM,EAAOyB,SAAWnB,EAAOmB,OACxB,wCAEA,wDAAwC,IAAhBzB,EAAOyB,OAAgBnB,EAAOmB,OAAtD,UCtDOE,G,MAXI,SAACC,GAClB,IAAIC,EAAQ,QAKZ,OAJID,GAAY,KACdC,EAAQ,SACJD,GAAY,MAAMC,EAAQ,QAEzBA,ICOT,IAiCeC,EAjCD,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UACrBJ,EAAWG,EAAWC,EACtBC,EAAgBL,EAAY,EAAII,GAAc,EAAIJ,GAClDM,EAAqBP,EAAWM,GAEpC,OADArB,QAAQC,IAAI,cAAeqB,GAEzB,yBAAKjC,UAAU,SACb,yBACEA,UAAU,YACVkC,QAAQ,cACRC,MAAM,8BAEN,uBAAGnC,UAAU,gBACX,4BAAQA,UAAU,qBAAqBoC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OACzD,0BACEC,gBAAe,WAAsB,IAAhBP,GAAqBQ,QAAQ,GAAnC,QACf/C,GAAG,uBACHO,UAAS,+BAA0BiC,GACnCQ,MAAO,CAAEC,OAAQT,GACjBU,EAAE,2EASR,0BAAM3C,UAAU,eArCtB,SAAwB4C,GACtB,IAAIC,EAAUC,KAAKC,MAAMH,EAAO,IAC5BI,EAAUJ,EAAO,GAIrB,OAHII,EAAU,KACZA,EAAO,WAAOA,IAEV,GAAN,OAAUH,EAAV,YAAqBG,GA+BcC,CAAenB,MC0CrCoB,G,MAnFA,CACb,CACEzD,GAAI,EACJE,IAAK,0BACLC,KAAM,eAER,CACEH,GAAI,EACJE,IAAK,uBACLC,KAAM,WAER,CACEH,GAAI,EACJE,IAAK,oBACLC,KAAM,SAER,CACEH,GAAI,EACJE,IAAK,oBACLC,KAAM,QAER,CACEH,GAAI,EACJE,IAAK,kBACLC,KAAM,oBAER,CACEH,GAAI,EACJE,IAAK,wBACLC,KAAM,gBAER,CACEH,GAAI,EACJE,IAAK,uBACLC,KAAM,aAER,CACEH,GAAI,EACJE,IAAK,qBACLC,KAAM,kBAER,CACEH,GAAI,EACJE,IAAK,qBACLC,KAAM,oBAER,CACEH,GAAI,GACJE,IAAK,oBACLC,KAAM,SAER,CACEH,GAAI,GACJE,IAAK,uBACLC,KAAM,YAER,CACEH,GAAI,GACJE,IAAK,sBACLC,KAAM,kBAER,CACEH,GAAI,GACJE,IAAK,sBACLC,KAAM,aAER,CACEH,GAAI,GACJE,IAAK,sBACLC,KAAM,iBAER,CACEH,GAAI,GACJE,IAAK,wBACLC,KAAM,QAER,CACEH,GAAI,GACJE,IAAK,4BACLC,KAAM,mBCpEK,SAASuD,EAAoBC,GAY1C,OAvBF,SAAiBC,GACf,IAAIC,EAAGC,EAAGC,EACV,IAAKA,EAAIH,EAAE7B,OAAS,EAAGgC,EAAI,EAAGA,IAC5BF,EAAIR,KAAKC,MAAMD,KAAKW,UAAYD,EAAI,IACpCD,EAAIF,EAAEG,GACNH,EAAEG,GAAKH,EAAEC,GACTD,EAAEC,GAAKC,EAET,OAAOF,EAeAK,CAXcN,EAAWO,QAAO,SAAUC,EAAKC,GAQpD,OAPAD,EAAIE,KAAKD,GACTD,EAAIE,KAAK,CACPlE,KAAMiE,EAAIjE,KACVH,GAAIoE,EAAIpE,GAAK,GACbE,IAAKkE,EAAIlE,MAGJiE,IACN,KCdL,IA4BeG,EA5BH,WACV,IADgB,EAGYzD,mBAAS,IAHrB,mBAGTD,EAHS,KAGD2D,EAHC,OAIoB1D,mBAAS,GAJ7B,mBAIT2D,EAJS,KAIGC,EAJH,KAMhBC,qBAAU,WACRH,EAAUb,EAAoBD,EAAOkB,MAAM,EANlC,OAOR,IAEHD,qBAAU,WACRE,MACC,CAACJ,IAEJ,IAAMI,EAAa,WACjB5C,YAAW,WACTwC,EAdY,IAccC,EAAcD,EAAa,KACpD,MAGL,OACE,yBAAKjE,UAAU,OACb,kBAAC,EAAD,CAAO8B,SApBK,GAoBiBmC,EAAYlC,UApB7B,KAqBZ,kBAAC,EAAD,CAAO1B,OAAQA,EAAQD,SArBX,KAqBqB6D,MClBnBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5E,QAAQ4E,MAAMA,EAAMC,c","file":"static/js/main.02a1f9ac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.scss\";\r\n\r\nconst Card = ({ id, disabled, src, name, handleClick, flipped, solved }) => {\r\n  return (\r\n    <div\r\n      className={`card-component ${flipped || solved ? \"flipped\" : \"\"} ${\r\n        solved ? \"solved\" : \"\"\r\n      }`}\r\n      onClick={() => {\r\n        !disabled && handleClick(id);\r\n      }}\r\n      // style={({ width: width }, { height: height })}\r\n    >\r\n      <img className={\"card-front\"} src={src} alt={name} />\r\n      <img className={\"card-back\"} src=\"/assets/card-front.jpg\" alt=\"logo\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport Card from \"../Card/Card\";\r\nimport \"./Board.scss\";\r\n\r\nconst Board = ({ gameOver, images }) => {\r\n  const [flippedCards, setFlippedCards] = useState([]);\r\n  const [solved, setSolved] = useState([]);\r\n  const [disabled, setDisabled] = useState(gameOver);\r\n\r\n  console.log(\"disabled? \", disabled, gameOver);\r\n  const handleClick = (id) => {\r\n    if (!gameOver) {\r\n      setDisabled(true);\r\n      console.log(\"starting flipped: \", flippedCards);\r\n      if (flippedCards.length === 0) {\r\n        setFlippedCards([...flippedCards, id]);\r\n        console.log(\"first flipped: \", flippedCards);\r\n        setDisabled(false);\r\n      } else {\r\n        if (sameCardClicked(id)) return;\r\n        console.log(\"pre setFlipped: \", flippedCards, id);\r\n        setFlippedCards([flippedCards[0], id]);\r\n        if (cardsMatch(id)) {\r\n          console.log(\"matched: \", flippedCards);\r\n          setSolved([...solved, flippedCards[0], id]); //spreading the flipped array didn't work before\r\n          // setTimeout(resetCards, 1500);\r\n          resetCards();\r\n        } else setTimeout(resetCards, 1000);\r\n      }\r\n      //\r\n    }\r\n  };\r\n\r\n  const resetCards = () => {\r\n    console.log(\"flipped to reset: \", flippedCards);\r\n    console.log(\"solved: \", solved);\r\n    setFlippedCards([]);\r\n    setDisabled(false);\r\n  };\r\n\r\n  const sameCardClicked = (id) => flippedCards.includes(id);\r\n\r\n  const cardsMatch = (id) => {\r\n    var clickedCard = images.find((image) => image.id === id);\r\n    var openCard = images.find((image) => image.id === flippedCards[0]);\r\n    console.log(\"clicked and open: \", clickedCard, openCard);\r\n    return clickedCard.name === openCard.name;\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <div className={`board ${gameOver ? \"ended\" : \"\"}`}>\r\n        {images.map(({ id, ...otherProps }) => (\r\n          <Card\r\n            key={id}\r\n            {...otherProps}\r\n            flipped={flippedCards.includes(id)}\r\n            handleClick={() => handleClick(id)}\r\n            disabled={disabled || solved.includes(id)}\r\n            solved={solved.includes(id)}\r\n          />\r\n        ))}\r\n      </div>\r\n      {solved.length === images.length ? (\r\n        <div>SOLVED!</div>\r\n      ) : (\r\n        <div>NOT SOLVED... {`${(solved.length * 100) / images.length} %`}</div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","const colorCodes = (fraction) => {\r\n  var color = \"green\";\r\n  if (fraction <= 0.5) {\r\n    color = \"orange\";\r\n    if (fraction <= 0.25) color = \"red\";\r\n  }\r\n  return color;\r\n};\r\n\r\n// const remainingPathColor = COLOR_CODES.info.color;\r\n\r\nexport default colorCodes;\r\n","import React from \"react\";\r\nimport \"./Timer.scss\";\r\nimport colorCodes from \"./colorCodes\";\r\n\r\nfunction formatTimeLeft(time) {\r\n  var minutes = Math.floor(time / 60);\r\n  let seconds = time % 60;\r\n  if (seconds < 10) {\r\n    seconds = `0${seconds}`;\r\n  }\r\n  return `${minutes}:${seconds}`;\r\n}\r\n\r\nconst Timer = ({ timeLeft, timeLimit }) => {\r\n  var fraction = timeLeft / timeLimit;\r\n  var clockFraction = fraction - (1 / timeLimit) * (1 - fraction);\r\n  var remainingPathColor = colorCodes(clockFraction);\r\n  console.log(\"pathcolor: \", remainingPathColor);\r\n  return (\r\n    <div className=\"timer\">\r\n      <svg\r\n        className=\"timer-svg\"\r\n        viewBox=\"0 0 100 100\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <g className=\"timer-circle\">\r\n          <circle className=\"timer-path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\" />\r\n          <path\r\n            strokeDasharray={`${(clockFraction * 283).toFixed(0)} 283`}\r\n            id=\"timer-path-remaining\"\r\n            className={`timer-path-remaining ${remainingPathColor}`}\r\n            style={{ stroke: remainingPathColor }}\r\n            d=\"\r\n          M 50, 50\r\n          m -45, 0\r\n          a 45,45 0 1,0 90,0\r\n          a 45,45 0 1,0 -90,0\r\n        \"\r\n          ></path>\r\n        </g>\r\n      </svg>\r\n      <span className=\"timer-label\">{formatTimeLeft(timeLeft)}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","const Images = [\r\n  {\r\n    id: 1,\r\n    src: \"/assets/andy-heroes.jpg\",\r\n    name: \"Andy-Heroes\",\r\n  },\r\n  {\r\n    id: 2,\r\n    src: \"/assets/anomaly.jpeg\",\r\n    name: \"Anomaly\",\r\n  },\r\n  {\r\n    id: 3,\r\n    src: \"/assets/arrow.jpg\",\r\n    name: \"Arrow\",\r\n  },\r\n  {\r\n    id: 4,\r\n    src: \"/assets/atwt.jpeg\",\r\n    name: \"ATWT\",\r\n  },\r\n  {\r\n    id: 5,\r\n    src: \"/assets/cc2.png\",\r\n    name: \"Church-Clothes-2\",\r\n  },\r\n  {\r\n    id: 6,\r\n    src: \"/assets/gawvi-ffm.jpg\",\r\n    name: \"Fight-For-Me\",\r\n  },\r\n  {\r\n    id: 7,\r\n    src: \"/assets/gawvi-wb.jpg\",\r\n    name: \"We-Belong\",\r\n  },\r\n  {\r\n    id: 8,\r\n    src: \"/assets/kb-twl.jpg\",\r\n    name: \"Today-We-Rebel\",\r\n  },\r\n  {\r\n    id: 9,\r\n    src: \"/assets/kb-twr.png\",\r\n    name: \"Tomorrow-We-Live\",\r\n  },\r\n  {\r\n    id: 10,\r\n    src: \"/assets/rehab.jpg\",\r\n    name: \"Rehab\",\r\n  },\r\n  {\r\n    id: 11,\r\n    src: \"/assets/sonshine.jpg\",\r\n    name: \"Sonshine\",\r\n  },\r\n  {\r\n    id: 12,\r\n    src: \"/assets/tdot-bp.jpg\",\r\n    name: \"Below-Paradise\",\r\n  },\r\n  {\r\n    id: 13,\r\n    src: \"/assets/tdot-kp.jpg\",\r\n    name: \"Kingdom-P\",\r\n  },\r\n  {\r\n    id: 14,\r\n    src: \"/assets/trip-gl.jpg\",\r\n    name: \"The-Good-Life\",\r\n  },\r\n  {\r\n    id: 15,\r\n    src: \"/assets/trip-rise.jpg\",\r\n    name: \"Rise\",\r\n  },\r\n  {\r\n    id: 16,\r\n    src: \"/assets/uncomfortable.jpg\",\r\n    name: \"Uncomfortable\",\r\n  },\r\n];\r\n\r\nexport default Images;\r\n","function shuffle(a) {\r\n  var j, x, i;\r\n  for (i = a.length - 1; i > 0; i--) {\r\n    j = Math.floor(Math.random() * (i + 1));\r\n    x = a[i];\r\n    a[i] = a[j];\r\n    a[j] = x;\r\n  }\r\n  return a;\r\n}\r\n\r\nexport default function duplicateAndShuffle(cardsArray) {\r\n  var duplicateArray = cardsArray.reduce(function (acc, obj) {\r\n    acc.push(obj);\r\n    acc.push({\r\n      name: obj.name,\r\n      id: obj.id + 0.5,\r\n      src: obj.src,\r\n    });\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  return shuffle(duplicateArray);\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport Board from \"./components/Board/Board\";\nimport Timer from \"./components/Timer/Timer\";\nimport \"./App.css\";\nimport Images from \"./card-list\";\nimport duplicateAndShuffle from \"./duplicateAndShuffle\";\n\nconst App = () => {\n  var size = 8;\n  var timeLimit = 45;\n  const [images, setImages] = useState([]);\n  const [timePassed, setTimePassed] = useState(0);\n\n  useEffect(() => {\n    setImages(duplicateAndShuffle(Images.slice(0, size)));\n  }, []);\n\n  useEffect(() => {\n    startTimer();\n  }, [timePassed]);\n\n  const startTimer = () => {\n    setTimeout(() => {\n      timePassed < timeLimit && setTimePassed(timePassed + 1);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"App\">\n      <Timer timeLeft={timeLimit - timePassed} timeLimit={timeLimit} />\n      <Board images={images} gameOver={timePassed === timeLimit} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}